/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as AutoFundContractJson } from "../test/AutoFund.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  AddStruct1,
  AddStruct2,
  Balances,
  MapValue,
  TokenBalance,
  TupleTestStruct,
  AllStructs,
} from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace AutoFundTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    insert: {
      params: CallContractParams<{ num: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    insert: {
      params: SignExecuteContractMethodParams<{ num: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { map?: Map<bigint, bigint> };
}

class Factory extends ContractFactory<AutoFundInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, AllStructs);
  }

  at(address: string): AutoFundInstance {
    return new AutoFundInstance(address);
  }

  tests = {
    insert: async (
      params: Omit<
        TestContractParams<never, { num: bigint }, AutoFundTypes.Maps>,
        "initialFields"
      >
    ): Promise<TestContractResult<null, AutoFundTypes.Maps>> => {
      return testMethod(this, "insert", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: {},
    asset?: Asset,
    address?: string,
    maps?: AutoFundTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const AutoFund = new Factory(
  Contract.fromJson(
    AutoFundContractJson,
    "=6-2+59=11-1+9=53-1+f=34+7a7e0214696e73657274206174206d617020706174683a2000=27-1+d",
    "04ee1668e2b37f74641ecaf98e8d34dd3384afe2c140bdbd4275cb36d62ae185",
    AllStructs
  )
);
registerContract(AutoFund);

// Use this class to interact with the blockchain
export class AutoFundInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    map: new RalphMap<bigint, bigint>(
      AutoFund.contract,
      this.contractId,
      "map"
    ),
  };

  async fetchState(): Promise<AutoFundTypes.State> {
    return fetchContractState(AutoFund, this);
  }

  view = {
    insert: async (
      params: AutoFundTypes.CallMethodParams<"insert">
    ): Promise<AutoFundTypes.CallMethodResult<"insert">> => {
      return callMethod(
        AutoFund,
        this,
        "insert",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    insert: async (
      params: AutoFundTypes.SignExecuteMethodParams<"insert">
    ): Promise<AutoFundTypes.SignExecuteMethodResult<"insert">> => {
      return signExecuteMethod(AutoFund, this, "insert", params);
    },
  };
}
