/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TransactContractJson } from "../test/Transact.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  AddStruct1,
  AddStruct2,
  Balances,
  MapValue,
  TokenBalance,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace TransactTypes {
  export type Fields = {
    tokenId: HexString;
    totalALPH: bigint;
    totalTokens: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    deposit: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    depositToken: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawToken: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    getTotalALPH: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalTokens: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    deposit: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    depositToken: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawToken: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getTotalALPH: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalTokens: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<TransactInstance, TransactTypes.Fields> {
  encodeFields(fields: TransactTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): TransactInstance {
    return new TransactInstance(address);
  }

  tests = {
    deposit: async (
      params: Omit<
        TestContractParamsWithoutMaps<TransactTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    withdraw: async (
      params: Omit<
        TestContractParamsWithoutMaps<TransactTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    depositToken: async (
      params: TestContractParamsWithoutMaps<
        TransactTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "depositToken", params, getContractByCodeHash);
    },
    withdrawToken: async (
      params: TestContractParamsWithoutMaps<
        TransactTypes.Fields,
        { amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawToken", params, getContractByCodeHash);
    },
    getTotalALPH: async (
      params: Omit<
        TestContractParamsWithoutMaps<TransactTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTotalALPH", params, getContractByCodeHash);
    },
    getTotalTokens: async (
      params: Omit<
        TestContractParamsWithoutMaps<TransactTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTotalTokens", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TransactTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Transact = new Factory(
  Contract.fromJson(
    TransactContractJson,
    "",
    "0b6427253638fa8f32b04e7c5915d41d51b0148a8e219e4881eba5548a42ae41",
    AllStructs
  )
);
registerContract(Transact);

// Use this class to interact with the blockchain
export class TransactInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TransactTypes.State> {
    return fetchContractState(Transact, this);
  }

  view = {
    deposit: async (
      params?: TransactTypes.CallMethodParams<"deposit">
    ): Promise<TransactTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        Transact,
        this,
        "deposit",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params?: TransactTypes.CallMethodParams<"withdraw">
    ): Promise<TransactTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        Transact,
        this,
        "withdraw",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    depositToken: async (
      params: TransactTypes.CallMethodParams<"depositToken">
    ): Promise<TransactTypes.CallMethodResult<"depositToken">> => {
      return callMethod(
        Transact,
        this,
        "depositToken",
        params,
        getContractByCodeHash
      );
    },
    withdrawToken: async (
      params: TransactTypes.CallMethodParams<"withdrawToken">
    ): Promise<TransactTypes.CallMethodResult<"withdrawToken">> => {
      return callMethod(
        Transact,
        this,
        "withdrawToken",
        params,
        getContractByCodeHash
      );
    },
    getTotalALPH: async (
      params?: TransactTypes.CallMethodParams<"getTotalALPH">
    ): Promise<TransactTypes.CallMethodResult<"getTotalALPH">> => {
      return callMethod(
        Transact,
        this,
        "getTotalALPH",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalTokens: async (
      params?: TransactTypes.CallMethodParams<"getTotalTokens">
    ): Promise<TransactTypes.CallMethodResult<"getTotalTokens">> => {
      return callMethod(
        Transact,
        this,
        "getTotalTokens",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    deposit: async (
      params: TransactTypes.SignExecuteMethodParams<"deposit">
    ): Promise<TransactTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(Transact, this, "deposit", params);
    },
    withdraw: async (
      params: TransactTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<TransactTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Transact, this, "withdraw", params);
    },
    depositToken: async (
      params: TransactTypes.SignExecuteMethodParams<"depositToken">
    ): Promise<TransactTypes.SignExecuteMethodResult<"depositToken">> => {
      return signExecuteMethod(Transact, this, "depositToken", params);
    },
    withdrawToken: async (
      params: TransactTypes.SignExecuteMethodParams<"withdrawToken">
    ): Promise<TransactTypes.SignExecuteMethodResult<"withdrawToken">> => {
      return signExecuteMethod(Transact, this, "withdrawToken", params);
    },
    getTotalALPH: async (
      params: TransactTypes.SignExecuteMethodParams<"getTotalALPH">
    ): Promise<TransactTypes.SignExecuteMethodResult<"getTotalALPH">> => {
      return signExecuteMethod(Transact, this, "getTotalALPH", params);
    },
    getTotalTokens: async (
      params: TransactTypes.SignExecuteMethodParams<"getTotalTokens">
    ): Promise<TransactTypes.SignExecuteMethodResult<"getTotalTokens">> => {
      return signExecuteMethod(Transact, this, "getTotalTokens", params);
    },
  };

  async multicall<Calls extends TransactTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TransactTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TransactTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TransactTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TransactTypes.MultiCallParams
      | TransactTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      Transact,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
