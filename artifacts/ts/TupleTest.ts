/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TupleTestContractJson } from "../test/TupleTest.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import * as types from "./types";

// Custom types for the contract
export namespace TupleTestTypes {
  export type Fields = {
    value: [bigint, types.TupleTestStruct];
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    updateValue0: {
      params: CallContractParams<{ v: bigint }>;
      result: CallContractResult<null>;
    };
    getA0: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, bigint]>;
    };
    updateA0: {
      params: CallContractParams<{ v: [bigint, bigint] }>;
      result: CallContractResult<null>;
    };
    updateA1: {
      params: CallContractParams<{ v: boolean }>;
      result: CallContractResult<null>;
    };
    getB: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[[bigint, bigint], [bigint, bigint]]>;
    };
    test: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, boolean]>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    updateValue0: {
      params: SignExecuteContractMethodParams<{ v: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getA0: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    updateA0: {
      params: SignExecuteContractMethodParams<{ v: [bigint, bigint] }>;
      result: SignExecuteScriptTxResult;
    };
    updateA1: {
      params: SignExecuteContractMethodParams<{ v: boolean }>;
      result: SignExecuteScriptTxResult;
    };
    getB: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    test: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TupleTestInstance,
  TupleTestTypes.Fields
> {
  encodeFields(fields: TupleTestTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      types.AllStructs
    );
  }

  at(address: string): TupleTestInstance {
    return new TupleTestInstance(address);
  }

  tests = {
    updateValue0: async (
      params: TestContractParamsWithoutMaps<
        TupleTestTypes.Fields,
        { v: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateValue0", params, getContractByCodeHash);
    },
    getA0: async (
      params: Omit<
        TestContractParamsWithoutMaps<TupleTestTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint]>> => {
      return testMethod(this, "getA0", params, getContractByCodeHash);
    },
    updateA0: async (
      params: TestContractParamsWithoutMaps<
        TupleTestTypes.Fields,
        { v: [bigint, bigint] }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateA0", params, getContractByCodeHash);
    },
    updateA1: async (
      params: TestContractParamsWithoutMaps<
        TupleTestTypes.Fields,
        { v: boolean }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateA1", params, getContractByCodeHash);
    },
    getB: async (
      params: Omit<
        TestContractParamsWithoutMaps<TupleTestTypes.Fields, never>,
        "args"
      >
    ): Promise<
      TestContractResultWithoutMaps<[[bigint, bigint], [bigint, bigint]]>
    > => {
      return testMethod(this, "getB", params, getContractByCodeHash);
    },
    test: async (
      params: Omit<
        TestContractParamsWithoutMaps<TupleTestTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, boolean]>> => {
      return testMethod(this, "test", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TupleTestTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const TupleTest = new Factory(
  Contract.fromJson(
    TupleTestContractJson,
    "",
    "c9f53cc60bdedd52071b1cb97dfe410eba63556bc7fce2e20e912c6a013eac9c",
    types.AllStructs
  )
);
registerContract(TupleTest);

// Use this class to interact with the blockchain
export class TupleTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TupleTestTypes.State> {
    return fetchContractState(TupleTest, this);
  }

  view = {
    updateValue0: async (
      params: TupleTestTypes.CallMethodParams<"updateValue0">
    ): Promise<TupleTestTypes.CallMethodResult<"updateValue0">> => {
      return callMethod(
        TupleTest,
        this,
        "updateValue0",
        params,
        getContractByCodeHash
      );
    },
    getA0: async (
      params?: TupleTestTypes.CallMethodParams<"getA0">
    ): Promise<TupleTestTypes.CallMethodResult<"getA0">> => {
      return callMethod(
        TupleTest,
        this,
        "getA0",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    updateA0: async (
      params: TupleTestTypes.CallMethodParams<"updateA0">
    ): Promise<TupleTestTypes.CallMethodResult<"updateA0">> => {
      return callMethod(
        TupleTest,
        this,
        "updateA0",
        params,
        getContractByCodeHash
      );
    },
    updateA1: async (
      params: TupleTestTypes.CallMethodParams<"updateA1">
    ): Promise<TupleTestTypes.CallMethodResult<"updateA1">> => {
      return callMethod(
        TupleTest,
        this,
        "updateA1",
        params,
        getContractByCodeHash
      );
    },
    getB: async (
      params?: TupleTestTypes.CallMethodParams<"getB">
    ): Promise<TupleTestTypes.CallMethodResult<"getB">> => {
      return callMethod(
        TupleTest,
        this,
        "getB",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    test: async (
      params?: TupleTestTypes.CallMethodParams<"test">
    ): Promise<TupleTestTypes.CallMethodResult<"test">> => {
      return callMethod(
        TupleTest,
        this,
        "test",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    updateValue0: async (
      params: TupleTestTypes.SignExecuteMethodParams<"updateValue0">
    ): Promise<TupleTestTypes.SignExecuteMethodResult<"updateValue0">> => {
      return signExecuteMethod(TupleTest, this, "updateValue0", params);
    },
    getA0: async (
      params: TupleTestTypes.SignExecuteMethodParams<"getA0">
    ): Promise<TupleTestTypes.SignExecuteMethodResult<"getA0">> => {
      return signExecuteMethod(TupleTest, this, "getA0", params);
    },
    updateA0: async (
      params: TupleTestTypes.SignExecuteMethodParams<"updateA0">
    ): Promise<TupleTestTypes.SignExecuteMethodResult<"updateA0">> => {
      return signExecuteMethod(TupleTest, this, "updateA0", params);
    },
    updateA1: async (
      params: TupleTestTypes.SignExecuteMethodParams<"updateA1">
    ): Promise<TupleTestTypes.SignExecuteMethodResult<"updateA1">> => {
      return signExecuteMethod(TupleTest, this, "updateA1", params);
    },
    getB: async (
      params: TupleTestTypes.SignExecuteMethodParams<"getB">
    ): Promise<TupleTestTypes.SignExecuteMethodResult<"getB">> => {
      return signExecuteMethod(TupleTest, this, "getB", params);
    },
    test: async (
      params: TupleTestTypes.SignExecuteMethodParams<"test">
    ): Promise<TupleTestTypes.SignExecuteMethodResult<"test">> => {
      return signExecuteMethod(TupleTest, this, "test", params);
    },
  };

  async multicall<Calls extends TupleTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TupleTestTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TupleTestTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TupleTestTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TupleTestTypes.MultiCallParams
      | TupleTestTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      TupleTest,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
