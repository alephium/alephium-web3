/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  ExecutableScript,
  ExecuteScriptParams,
  ExecuteScriptResult,
  Script,
  SignerProvider,
  HexString,
} from "@alephium/web3";
import { getContractByCodeHash } from "./contracts";
import { default as AddMainScriptJson } from "../add/AddMain.ral.json";
import { default as CallScript0ScriptJson } from "../test/CallScript0.ral.json";
import { default as CallScript1ScriptJson } from "../test/CallScript1.ral.json";
import { default as DepositScriptJson } from "../test/Deposit.ral.json";
import { default as DepositTokenScriptJson } from "../test/DepositToken.ral.json";
import { default as DestroyAddScriptJson } from "../add/DestroyAdd.ral.json";
import { default as GreeterMainScriptJson } from "../greeter/GreeterMain.ral.json";
import { default as InsertIntoMapScriptJson } from "../test/InsertIntoMap.ral.json";
import { default as MintNFTTestScriptJson } from "../nft/MintNFTTest.ral.json";
import { default as MultiDepositScriptJson } from "../test/MultiDeposit.ral.json";
import { default as MultiWithdrawScriptJson } from "../test/MultiWithdraw.ral.json";
import { default as RemoveFromMapScriptJson } from "../test/RemoveFromMap.ral.json";
import { default as TemplateArrayVarScriptJson } from "../test/TemplateArrayVar.ral.json";
import { default as TestAssertScriptJson } from "../test/TestAssert.ral.json";
import { default as UpdateMapValueScriptJson } from "../test/UpdateMapValue.ral.json";
import { default as UpdateUserAccountScriptJson } from "../test/UpdateUserAccount.ral.json";
import { default as WithdrawScriptJson } from "../test/Withdraw.ral.json";
import { default as WithdrawNFTCollectionTestScriptJson } from "../nft/WithdrawNFTCollectionTest.ral.json";
import * as types from "./types";

export const AddMain = new ExecutableScript<{
  add: HexString;
  array: [bigint, bigint];
}>(
  Script.fromJson(AddMainScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const CallScript0 = new ExecutableScript<
  { mapTest: HexString; key: Address },
  types.MapValue
>(
  Script.fromJson(CallScript0ScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const CallScript1 = new ExecutableScript<
  { mapTest: HexString; key: Address; userAccount: HexString },
  [types.MapValue, types.Balances]
>(
  Script.fromJson(CallScript1ScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const Deposit = new ExecutableScript<{ c: HexString }>(
  Script.fromJson(DepositScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const DepositToken = new ExecutableScript<{
  c: HexString;
  tokenId: HexString;
  amount: bigint;
}>(
  Script.fromJson(DepositTokenScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const DestroyAdd = new ExecutableScript<{
  add: HexString;
  caller: Address;
}>(
  Script.fromJson(DestroyAddScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const GreeterMain = new ExecutableScript<{
  greeterContractId: HexString;
}>(
  Script.fromJson(GreeterMainScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const InsertIntoMap = new ExecutableScript<{
  mapTest: HexString;
  from: Address;
  value: types.MapValue;
}>(
  Script.fromJson(InsertIntoMapScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const MintNFTTest = new ExecutableScript<{
  nftCollectionContractId: HexString;
  uri: HexString;
  royalty: boolean;
}>(
  Script.fromJson(MintNFTTestScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const MultiDeposit = new ExecutableScript<{
  c: [HexString, HexString];
  tokenId: HexString;
}>(
  Script.fromJson(MultiDepositScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const MultiWithdraw = new ExecutableScript<{
  c: [HexString, HexString];
}>(
  Script.fromJson(MultiWithdrawScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const RemoveFromMap = new ExecutableScript<{
  mapTest: HexString;
  key: Address;
}>(
  Script.fromJson(RemoveFromMapScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const TemplateArrayVar = new ExecutableScript<{
  address: Address;
  numbers0: [[bigint, bigint], [bigint, bigint]];
  bytes: HexString;
  numbers1: [bigint, bigint, bigint];
}>(
  Script.fromJson(TemplateArrayVarScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const TestAssert = new ExecutableScript<{ assert: HexString }>(
  Script.fromJson(TestAssertScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const UpdateMapValue = new ExecutableScript<{
  mapTest: HexString;
  key: Address;
}>(
  Script.fromJson(UpdateMapValueScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const UpdateUserAccount = new ExecutableScript<{
  account: HexString;
  tokens: [types.TokenBalance, types.TokenBalance];
  address: Address;
}>(
  Script.fromJson(UpdateUserAccountScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const Withdraw = new ExecutableScript<{ c: HexString }>(
  Script.fromJson(WithdrawScriptJson, "", types.AllStructs),
  getContractByCodeHash
);

export const WithdrawNFTCollectionTest = new ExecutableScript<{
  collection: HexString;
  amount: bigint;
}>(
  Script.fromJson(WithdrawNFTCollectionTestScriptJson, "", types.AllStructs),
  getContractByCodeHash
);
