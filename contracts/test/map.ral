struct MapValue {
  id: U256,
  mut balance: U256
}
Contract MapTest() {
  mapping[Address, MapValue] map0
  mapping[U256, U256] map1
  mapping[ByteVec, U256] map2

  @using(preapprovedAssets = true, checkExternalCaller = false)
  pub fn insert(key: Address, value: MapValue) -> () {
    map0.insert!(key, key, value)
    map1.insert!(key, value.id, value.balance)
    map2.insert!(key, #0011, value.balance)
  }

  @using(checkExternalCaller = false)
  pub fn update(key: Address) -> () {
    let value = map0[key]
    map0[key].balance = value.balance + 1
    map1[value.id] = value.balance + 1
    map2[#0011] = value.balance + 1
  }

  @using(checkExternalCaller = false)
  pub fn remove(key: Address) -> () {
    let value = map0[key]
    map0.remove!(key, key)
    map1.remove!(key, value.id)
    map2.remove!(key, #0011)
  }

  pub fn getValue(key: Address) -> MapValue {
    return map0[key]
  }
}

Contract MapTestWrapper(inner: MapTest) {
  @using(preapprovedAssets = true, checkExternalCaller = false)
  pub fn insert(key: Address, value: MapValue) -> () {
    inner.insert{key -> ALPH: mapEntryDeposit!() * 3}(key, value)
  }

  @using(checkExternalCaller = false)
  pub fn update(key: Address) -> () {
    inner.update(key)
  }

  @using(checkExternalCaller = false)
  pub fn remove(key: Address) -> () {
    inner.remove(key)
  }
}

TxScript InsertIntoMap(mapTest: MapTest, from: Address, value: MapValue) {
  mapTest.insert{from -> ALPH: mapEntryDeposit!() * 3}(from, value)
}

TxScript RemoveFromMap(mapTest: MapTest, key: Address) {
  mapTest.remove(key)
}

TxScript UpdateMapValue(mapTest: MapTest, key: Address) {
  mapTest.update(key)
}

Contract MapTestSub(mapTestTemplateId: ByteVec) {
  @using(preapprovedAssets = true, checkExternalCaller = false)
  pub fn init(caller: Address, value: MapValue) -> ByteVec {
    let path = b`map:` ++ toByteVec!(caller)
    let (encodedImmFields, encodedMutFields) = MapTest.encodeFields!()
    let mapTestId = copyCreateSubContract!{caller -> ALPH: minimalContractDeposit!()}(
      path,
      mapTestTemplateId,
      encodedImmFields,
      encodedMutFields
    )
    MapTest(mapTestId).insert{caller -> ALPH: mapEntryDeposit!() * 3}(caller, value)
    return mapTestId
  }
}
